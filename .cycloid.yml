# Use the latest version 2 of the Cycloid stack engine.
version: 3

name: Terraform
canonical: terraform-sample
author: '($> .stack_author <$)'
# Fill in the stack details.
description: 'Discover how to integrate Terraform in your pipelines.'
image: https://raw.githubusercontent.com/cycloidio/bootstrap-stacks/master/terraform-sample/thumbnail.png
keywords:
  - 'terraform'
  - '($> .stack_usecase <$)'
technologies:
  - technology: terraform
    version: 1.3.9
template: true
status: 'public'
quota: true

# Add use cases to the stack.
# See: https://docs.cycloid.io/manage/pipeline/multi-use-case.html#multiple-use-case
config:
  aws:
    name: 'AWS'
    description: 'Manage Amazon Web Services (aws) resources.'
    cloud_provider: aws
    pipeline:
      pipeline:
        path: 'pipeline/pipeline.yml'
      variables:
        path: 'pipeline/variables.sample.yml'
        destination: '($ .project $)/pipeline/variables-($ .environment $).yml'
    terraform:
      main:
        path: 'terraform/main.tf.sample'
        destination: '($ .project $)/terraform/($ .environment $)/main.tf'

  azure:
    name: 'Azure'
    description: 'Manage Azure (azurerm) resources.'
    cloud_provider: azurerm
    pipeline:
      pipeline:
        path: 'pipeline/pipeline.yml'
      variables:
        path: 'pipeline/variables.sample.yml'
        destination: '($ .project $)/pipeline/variables-($ .environment $).yml'
    terraform:
      main:
        path: 'terraform/main.tf.sample'
        destination: '($ .project $)/terraform/($ .environment $)/main.tf'

  gcp:
    name: 'GCP'
    description: 'Manage Google Cloud Platform (google) resources.'
    cloud_provider: google
    pipeline:
      pipeline:
        path: 'pipeline/pipeline.yml'
      variables:
        path: 'pipeline/variables.sample.yml'
        destination: '($ .project $)/pipeline/variables-($ .environment $).yml'
    terraform:
      main:
        path: 'terraform/main.tf.sample'
        destination: '($ .project $)/terraform/($ .environment $)/main.tf'

  vanilla:
    name: 'Basic Terraform'
    description: 'Cloud-agnostic Terraform sample with no specific provider integration.'
    pipeline:
      pipeline:
        path: 'pipeline/pipeline.yml'
      variables:
        path: 'pipeline/variables.sample.yml'
        destination: '($ .project $)/pipeline/variables-($ .environment $).yml'
    terraform:
      main:
        path: 'terraform/main.tf.sample'
        destination: '($ .project $)/terraform/($ .environment $)/main.tf'
